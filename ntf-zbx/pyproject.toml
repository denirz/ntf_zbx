[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ntf-zbx"
dynamic = ["version"]
description = 'Execute CLI in act_conf.ini file  when calling special '
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Denis Irz", email = "denirz@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/unknown/ntf-zbx#readme"
Issues = "https://github.com/unknown/ntf-zbx/issues"
Source = "https://github.com/unknown/ntf-zbx"

[tool.hatch.version]
path = "src/ntf_zbx/__about__.py"


[tool.hatch.build.targets.sdist]

[tool.hatch.build.targets.wheel]

#[tool.hatch.build.hooks.pytest]




[tool.hatch.envs.hatch-test]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
#run = "cd tests/; export PYTHONPATH=../src;python -m unittest   "

[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-cov"
]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
#pytest = "pwd;export PYTHONPATH=src;pwd; pytest {args:tests} --rootdir=tests/"
pytest = "pwd;export PYTHONPATH=src;pwd; pytest {args:tests} --rootdir=tests/"
test = "cd tests/; export PYTHONPATH=../src;python -m unittest   "
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/ntf_zbx tests}"

[tool.coverage.run]
source_pkgs = ["ntf_zbx", "tests"]
branch = true
parallel = true
omit = [
  "src/ntf_zbx/__about__.py",
]

[tool.coverage.paths]
ntf_zbx = ["src/ntf_zbx", "*/ntf-zbx/src/ntf_zbx"]
tests = ["tests", "*/ntf-zbx/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
extend-select = ["C901",
                "G004", #Logging statement uses f-string
                "PLC0415",
                  ]

[tool.ruff.lint.extend-per-file-ignores]
"docs/.hooks/*" = ["INP001", "T201"]
"src/*" = [
                  "G004", #Logging statement uses f-string
                "PLC0415",
                "TRY300",# Consider moving this statement to an `else` block

]
"tests/*" = [
             "PLC0415",
     "ARG001",# Unused function argument: `create_config`
     "PT009", # Use a regular `assert` instead of unittest-style `assertIsInstance`
     "T201",  # `print` found
     "N802", # Function name `testSenderwithtimeout` should be lowercase
     "N801",# Class name `Test_cmdserder_correct` should use CapWords convention
]
"tests/test_config.py" = [
     "PT027", # Use `pytest.raises` instead of unittest-style `assertRaises`

]
[tool.ruff.lint.isort]
known-first-party = ["foo", "bar"]